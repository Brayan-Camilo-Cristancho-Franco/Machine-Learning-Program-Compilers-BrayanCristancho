package Machine_Learnig_Program.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new DescriptionModel_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new FamilyModel_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Head_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new InputBody_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new InputValue_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new InputsBody_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new InputsStatement_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new LayerBody_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new LayerValue_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new LayersBody_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new LayersStatement_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new MLDocument_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new ModelBody_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new ModelStatement_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new NameInput_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new NameLayer_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new NameModel_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new NameOutput_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new OutputBody_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new OutputValue_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new OutputsBody_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new OutputsStatement_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new Params_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new ParamsLayer_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new TypeInput_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new TypeModel_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new TypeOutput_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38d4L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38d2L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c36d0L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38d8L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38d7L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38d6L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38d5L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c3900L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38ffL), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38feL), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38e3L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746aa77eL), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38e2L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38e1L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38d9L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c3901L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38d1L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38dfL), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38deL), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38ddL), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38dcL), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38dbL), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c3903L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c3902L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38daL), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38d3L), MetaIdFactory.conceptId(0xf03daa50cd2c41b9L, 0x926581a1c1e4c00cL, 0x2a9f739d746c38e0L)).seal();
}
